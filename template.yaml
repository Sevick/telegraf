AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
# create admin role to manage all related resources
Metadata:
  ParameterGroups:
    - Label:
        default: "General settings"
      Parameters:
        - ApplicationName
        - SourceSNSTopic
        - SourceSNSTopicSubscribeRole
        - LogsRetentionInDays

    - Label:
        default: "SNS configuration"
      Parameters:
        - SNSBatchSize

    - Label:
        default: "Telegram bot configuration"
      Parameters:
        - TelegramBotToken
        - TelegramChannel
        - TelegramSendTimeout


  AWS::CloudFormation::Interface:
    ParameterLabels:
      SourceSNSTopic:
        default: "Source SNS topic ARN to subscribe to"
      SourceSNSTopicSubscribeRole:
        default: "Existing role to access SNS topic"
      SNSBatchSize:
        default: "SNS batch size. Batching is supported by SNS-FIFO only."
      LogsRetentionInDays:
        default: "Logs retention in days"


Parameters:
  ApplicationName:
    Type: String
    Default: "Telegraf"

  LogsRetentionInDays:
    Type: Number
    Default: 3
    Description: "Logs retention in days"

  SourceSNSTopic:
    Type: String
    Default: "arn:aws:sns:us-east-1:286005182102:telegraf-test-topic-5773484857"
    Description: "arn:aws:sns:<Region>:<AccountID>:<SNS topic>.fifo"

  SourceSNSTopicSubscribeRole:
    Type: String
    Default: ""
    Description: "Exiting role to access SNS topic (should grant SNS:Subscribe). If empty  - new role will be created"

  SNSBatchSize:
    Type: Number
    Description: "Number of messages to be pulled from SNS"
    Default: 10


  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: "The token to be used to send notifications"
    Default: "XXYYXXYY"
  TelegramChannel:
    Type: String
    NoEcho: true
    Description: "Group or channel ID to send notifications"
    Default: "-100XXXXX"
  TelegramSendTimeout:
    Type: Number
    Default: 30
    Description: "Seconds to wait for Telegram send message to complete"

  LogLevel:
    Type: String
    Default: "DEBUG"
  LogFormat:
    Type: String
    Description: "Text/Json"
    Default: "Text"
  S3BucketName:
    Type: String
    Description: "S3Bucket containing lamdas source code"
    Default: "telegraf-src-8857ffkjd48fkn"

Conditions:
  SourceSNSTopicSubscribeRoleHasNoValue: !Equals [ !Ref SourceSNSTopicSubscribeRole, "" ]

Resources:
  TelegrafFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TelegrafFunction
      CodeUri: lambda_telegraf/src/
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: !Ref TelegramSendTimeout
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: !Ref LogLevel
          TELEGRAMBOTTOKEN_PARAMETER_ARN: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramToken"
          TELEGRAMCHANNEL_PARAMETER_ARN: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramChannel"
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt TelegrafLogGroup.Arn
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource: [
                !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramToken",
                !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramChannel"
              ]


  TelegrafSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref SourceSNSTopic
      Endpoint: !GetAtt TelegrafFunction.Arn

  LambdaInvokePermissionForSNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TelegrafFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SourceSNSTopic


  CreateParameterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateParameterFunction
      CodeUri: lambda_parameter_api/src/
      Handler: parameter_api.create_secure_parameter
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: INFO
          TELEGRAMBOTTOKEN_PARAMETER_ARN: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramToken"
          TELEGRAMCHANNEL_PARAMETER_ARN: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/telegramChannel"
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt TelegrafLogGroup.Arn
          - Effect: Allow
            Action:
              - ssm:PutParameter
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/*"

  DeleteParameterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteParameterFunction
      CodeUri: lambda_parameter_api/src/
      Handler: parameter_api.delete_secure_parameter
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: INFO
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt TelegrafLogGroup.Arn
          - Effect: Allow
            Action:
              - ssm:DeleteParameter
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${AWS::StackName}/*"

  TelegrafLogGroup:
    Type: AWS::Logs::LogGroup
    #DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub "${ApplicationName}/${AWS::StackName}"
      RetentionInDays: !Ref LogsRetentionInDays

  TelegrafAppSNSTopicSubscribeRole:
    Type: AWS::IAM::Role
    Condition: SourceSNSTopicSubscribeRoleHasNoValue
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSTopicSubscribePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SNS:Subscribe
                Resource: !Ref SourceSNSTopic


  TelegrafApplication:
    Type: AWS::ServiceCatalogAppRegistry::Application
    Properties:
      Name: !Sub "${ApplicationName}-${AWS::StackName}"
      Description: Telegraf bot for Telegram
      Tags:
        Environment: Production

  AppAssociation:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !Ref TelegrafApplication
      Resource: !Ref AWS::StackId
      ResourceType: CFN_STACK


  StackCompletionEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - CreateParameterFunction
      - TelegrafLogGroup
    Properties:
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        detail:
          stack-id:
            - !Ref AWS::StackId
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt CreateParameterFunction.Arn
          Id: CreateParameterFunctionTarget_Channel
          Input: !Sub |
            {
              "parameterName": "/${ApplicationName}/${AWS::StackName}/telegramToken",
              "parameterValue": "${TelegramBotToken}",
              "parameterDescr": "TelegramBotToken for ${ApplicationName}/${AWS::StackName}"
            }
        - Arn: !GetAtt CreateParameterFunction.Arn
          Id: CreateParameterFunctionTarget_Token
          Input: !Sub |
            {
              "parameterName": "/${ApplicationName}/${AWS::StackName}/telegramChannel",
              "parameterValue": "${TelegramChannel}",
              "parameterDescr": "TelegramChannel for ${ApplicationName}/${AWS::StackName}"
            }             

  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateParameterFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StackCompletionEventRule.Arn

  StackDeleteHookTelegramChannel:
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !GetAtt DeleteParameterFunction.Arn
      parameterName: !Sub "/${ApplicationName}/${AWS::StackName}/telegramChannel"
      Policies:
        - PolicyName: StackDeleteHookTelegramChannelPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DeleteParameterFunction.Arn

  StackDeleteHookTelegramToken:
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !GetAtt DeleteParameterFunction.Arn
      parameterName: !Sub "/${ApplicationName}/${AWS::StackName}/telegramToken"
      Policies:
        - PolicyName: StackDeleteHookTelegramTokenPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt DeleteParameterFunction.Arn

Outputs:
  TelegrafFunctionArn:
    Description: "ARN of the TelegrafFunction Lambda function"
    Value: !GetAtt TelegrafFunction.Arn

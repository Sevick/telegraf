Transform: AWS::Serverless-2016-10-31

# create admin role to manage all related resources


Metadata:
  ParameterGroups:
    - Label:
        default: "General settings"
      Parameters:
        - ApplicationName
        - SourceSNSTopic
        - SourceSNSTopicSubscribeRole
        - LogsRetentionInDays

    - Label:
        default: "SQS buffer configuration"
      Parameters:
        - SQSPollDelay
        - SQSBatchSize
        - SQSRetryLimit

    - Label:
        default: "Telegram bot configuration"
      Parameters:
        - TelegramBotToken
        - TelegramChannel
        - TelegramSendTimeout


  AWS::CloudFormation::Interface:
    ParameterLabels:
      SourceSNSTopic:
        default: "Source SNS topic ARN to subscribe to"
      SourceSNSTopicSubscribeRole:
        default: "Existing role to access SNS topic"
      SQSLengthWarningLimit:
        default: "Threshold for the length of the SQS queue used for buffering"
      SQSPollDelay:
        default: "SQS poll delay"
      SQSBatchSize:
        default: "SQS batch size"
      SQSRetryLimit:
        default: "SQS retry limit"
      LogsRetentionInDays:
        default: "Logs retention in days"


Parameters:
  ApplicationName:
    Type: String
    Default: "Telegraf"

  LogsRetentionInDays:
    Type: Number
    Default: 3
    Description: "Logs retention in days"

  SourceSNSTopic:
    Type: String
    Default: "arn:aws:sns:us-east-1:286005182102:telegraf-test-topic.fifo"
    Description: "arn:aws:sns:<Region>:<AccountID>:<SNS topic>.fifo"

  SourceSNSTopicSubscribeRole:
    Type: String
    Default: ""
    Description: "Exiting role to access SNS topic (should grant SNS:Subscribe). If empty  - new role will be created"

  SQSLengthWarningLimit:
    Type: Number
    Description: "Threshold for the length of the SQS queue used for buffering"
    Default: 1000
  SQSPollDelay:
    Type: Number
    Description: "How long (sec) SQS buffer queue waits for messages to become available before invoking consumer"
    Default: 10
  SQSBatchSize:
    Type: Number
    Description: "Number of messages to be pulled from SQS buffer queue at once"
    Default: 10
  SQSRetryLimit:
    Type: Number
    Description: "Number of retries before moving message to DLQ or dropped"
    Default: 3

  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: "The token to be used to send notifications"
  TelegramChannel:
    Type: String
    NoEcho: true
    Description: "Group or channel ID to send notifications"
  TelegramSendTimeout:
    Type: Number
    Default: 30
    Description: "Seconds to wait for Telegram send message to complete"

Conditions:
  SourceSNSTopicSubscribeRoleHasValue: !Not [ !Equals [ !Ref SourceSNSTopicSubscribeRole, "" ] ]

Resources:
  TelegrafFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TelegrafFunction
      CodeUri: s3://telegraf-src-8857ffkjd48fkn/lambda/
      Handler: telegraf_sqs_consumer.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: !Ref TelegramSendTimeout
      Events:
        TelefrafQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TelegrafQueue.Arn
            BatchSize: !Ref SQSBatchSize
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN_PARAMETER: !Ref TelegramBotTokenParameter
          TELEGRAM_CHANNEL_PARAMETER: !Ref TelegramChannelParameter
      Architectures:
        - arm64
      Role:
        Fn::GetAtt:
          - TelegrafAppRole
          - Arn


  TelegrafLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Ref ApplicationName
      RetentionInDays: !Ref LogsRetentionInDays


  TelegrafQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      DeduplicationScope: queue
      MessageRetentionPeriod: 86400

  TelegramBotTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ApplicationName}/telegramBotToken"
      Type: SecureString
      DataType: String
      Value: !Ref TelegramBotToken
      Description: !Sub "Telegram bot token for ${ApplicationName} application"
      Tags:
        Environment: Production
        Application: !Ref ApplicationName

  TelegramChannelParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ApplicationName}/telegramChannel"
      Type: SecureString
      DataType: String
      Value: !Ref TelegramChannel
      Description: !Sub "Telegram channel for ${ApplicationName} application"
      Tags:
        Environment: Production
        Application: !Ref ApplicationName


  TelegrafAppSNSTopicSubscribeRole:
    Type: AWS::IAM::Role
    Condition: SourceSNSTopicSubscribeRoleHasValue
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TelegrafAppSNSTopicSubscribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SNS:Subscribe
                Resource: !Ref SourceSNSTopic


  TelegrafAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TelegrafAppPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt TelegrafLogGroup.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt TelegrafQueue.Arn
        - PolicyName: SSMParameterAccess-TelegramBotToken
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: [
                    !GetAtt TelegramBotTokenParameter.Arn,
                    !GetAtt TelegramChannelParameter.Arn
                ]
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/alias/aws/ssm

  TelegrafApplication:
    Type: AWS::ServiceCatalogAppRegistry::Application
    Properties:
      Name: !Ref ApplicationName
      Description: Telegraf bot for Telegram
      Tags:
        Environment: Production

  AppAssociation:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !Ref TelegrafApplication
      Resource: !Ref AWS::StackId
      ResourceType: CFN_STACK

Outputs:
  SqsQueueArn:
    Value: !GetAtt TelegrafQueue.Arn
  ParameterArn:
    Description: "ARN of the created SSM Parameter (bot token)"
    Value: !GetAtt TelegramBotTokenParameter.Arn
  LambdaFunctionArn:
    Description: "ARN of the Telegram Bot Lambda function"
    Value: !GetAtt TelegrafFunction.Arn

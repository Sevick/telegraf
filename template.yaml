Transform: AWS::Serverless-2016-10-31

# create admin role to manage all related resources


Metadata:
  ParameterGroups:
    - Label:
        default: "General settings"
      Parameters:
        - ApplicationName
        - SourceSNSTopic
        - SourceSNSTopicSubscribeRole
        - LogsRetentionInDays

    - Label:
        default: "SQS buffer configuration"
      Parameters:
        - SQSPollDelay
        - SQSBatchSize
        - SQSRetryLimit

    - Label:
        default: "Telegram bot configuration"
      Parameters:
        - TelegramBotToken
        - TelegramChannel
        - TelegramSendTimeout


  AWS::CloudFormation::Interface:
    ParameterLabels:
      SourceSNSTopic:
        default: "Source SNS topic ARN to subscribe to"
      SourceSNSTopicSubscribeRole:
        default: "Existing role to access SNS topic"
      SQSLengthWarningLimit:
        default: "Threshold for the length of the SQS queue used for buffering"
      SQSPollDelay:
        default: "SQS poll delay"
      SQSBatchSize:
        default: "SQS batch size"
      SQSRetryLimit:
        default: "SQS retry limit"
      LogsRetentionInDays:
        default: "Logs retention in days"


Parameters:
  ApplicationName:
    Type: String
    Default: "Telegraf"

  LogsRetentionInDays:
    Type: Number
    Default: 3
    Description: "Logs retention in days"

  SourceSNSTopic:
    Type: String
    Default: "arn:aws:sns:us-east-1:286005182102:telegraf-test-topic-5773484857"
    Description: "arn:aws:sns:<Region>:<AccountID>:<SNS topic>.fifo"

  SourceSNSTopicSubscribeRole:
    Type: String
    Default: ""
    Description: "Exiting role to access SNS topic (should grant SNS:Subscribe). If empty  - new role will be created"

  SQSLengthWarningLimit:
    Type: Number
    Description: "Threshold for the length of the SQS queue used for buffering"
    Default: 1000
  SQSPollDelay:
    Type: Number
    Description: "How long (sec) SQS buffer queue waits for messages to become available before invoking consumer"
    Default: 10
  SQSBatchSize:
    Type: Number
    Description: "Number of messages to be pulled from SQS buffer queue at once"
    Default: 10
  SQSRetryLimit:
    Type: Number
    Description: "Number of retries before moving message to DLQ or dropped"
    Default: 3

  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: "The token to be used to send notifications"
  TelegramChannel:
    Type: String
    NoEcho: true
    Description: "Group or channel ID to send notifications"
  TelegramSendTimeout:
    Type: Number
    Default: 30
    Description: "Seconds to wait for Telegram send message to complete"

  LogFormat:
    Type: String
    Description: "Text/Json"
    Default: "Text"
  S3BucketName:
    Type: String
    Description: "S3Bucket containing lamdas source code"
    Default: "telegraf-src-8857ffkjd48fkn"

Conditions:
  SourceSNSTopicSubscribeRoleHasValue: !Not [ !Equals [ !Ref SourceSNSTopicSubscribeRole, "" ] ]

Resources:
  TelegrafFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TelegrafFunction
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: c77b98e2e5c0f436c01c43ae4f632a78
      Handler: telegraf_sqs_consumer.lambda_handler
      Runtime: python3.12
      MemorySize: 128
      Timeout: !Ref TelegramSendTimeout
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: INFO
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Role:
        Fn::GetAtt:
          - TelegrafAppRole
          - Arn


  TelegrafSQSMapping:
    DependsOn:
      - TelegrafFunction
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: !Ref SQSBatchSize
      EventSourceArn: !GetAtt TelegrafQueue.Arn
      FunctionName: !Ref TelegrafFunction
      Enabled: false

  CreateParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateParameterFunction
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: a91173da9b2d9d2c4a6d2e87175b75ad
      Handler: parameter_api.create_secure_parameter
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: INFO
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Role:
        Fn::GetAtt:
          - TelegrafCreateParameterRole
          - Arn

  DeleteParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteParameterFunction
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: a91173da9b2d9d2c4a6d2e87175b75ad
      Handler: parameter_api.delete_secure_parameter
      Runtime: python3.12
      MemorySize: 128
      Timeout: 60
      Architectures:
        - arm64
      Environment:
        Variables:
          LOGLEVEL: INFO
      LoggingConfig:
        LogGroup: !Ref TelegrafLogGroup
        LogFormat: !Ref LogFormat
      Role:
        Fn::GetAtt:
          - TelegrafCreateParameterRole
          - Arn

  TelegrafLogGroup:
    Type: AWS::Logs::LogGroup
    #DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub "${ApplicationName}/${AWS::StackName}"
      RetentionInDays: !Ref LogsRetentionInDays


  TelegrafQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      DeduplicationScope: queue
      MessageRetentionPeriod: 86400

  TelegrafCreateParameterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CreateParameterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt TelegrafLogGroup.Arn
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"

  TelegrafAppSNSTopicSubscribeRole:
    Type: AWS::IAM::Role
    Condition: SourceSNSTopicSubscribeRoleHasValue
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSTopicSubscribe
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SNS:Subscribe
                Resource: !Ref SourceSNSTopic


  TelegrafAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TelegrafAppPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt TelegrafLogGroup.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TelegrafQueue.Arn
        - PolicyName: SSMParameterAccess-TelegramBotToken
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: [
                    !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/telegramToken",
                    !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/telegramChannel"
                ]


  TelegrafApplication:
    Type: AWS::ServiceCatalogAppRegistry::Application
    Properties:
      Name: !Sub "${ApplicationName}-${AWS::StackName}"
      Description: Telegraf bot for Telegram
      Tags:
        Environment: Production

  AppAssociation:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !Ref TelegrafApplication
      Resource: !Ref AWS::StackId
      ResourceType: CFN_STACK


  StackCompletionEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - CreateParameterFunction
      - TelegrafLogGroup
    Properties:
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        detail:
          stack-id:
            - !Ref AWS::StackId
          status-details:
            status:
              - CREATE_COMPLETE
              - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt CreateParameterFunction.Arn
          Id: CreateParameterFunctionTarget_Channel
          Input: !Sub |
            {
              "parameterName": "/${AWS::StackName}/telegramToken",
              "parameterValue": "${TelegramBotToken}",
              "parameterDescr": "parameter for ${ApplicationName} application"
            }
        - Arn: !GetAtt CreateParameterFunction.Arn
          Id: CreateParameterFunctionTarget_Token
          Input: !Sub |
            {
              "parameterName": "/${AWS::StackName}/telegramChannel",
              "parameterValue": "${TelegramChannel}",
              "parameterDescr": "parameter for ${ApplicationName} application"
            }             

  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateParameterFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StackCompletionEventRule.Arn

  StackDeleteHookTelegramChannel:
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !GetAtt DeleteParameterFunction.Arn
      parameterName: !Sub "/${AWS::StackName}/telegramChannel"
      Policies:
        - PolicyName: StackDeleteHookTelegramChannelPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - lambda:InvokeFunction
                Resource: !GetAtt DeleteParameterFunction.Arn

  StackDeleteHookTelegramToken:
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !GetAtt DeleteParameterFunction.Arn
      parameterName: !Sub "/${AWS::StackName}/telegramToken"
      Policies:
        - PolicyName: StackDeleteHookTelegramTokenPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - lambda:InvokeFunction
                Resource: !GetAtt DeleteParameterFunction.Arn

Outputs:
  SqsQueueArn:
    Value: !GetAtt TelegrafQueue.Arn
  LambdaFunctionArn:
    Description: "ARN of the Telegram Bot Lambda function"
    Value: !GetAtt TelegrafFunction.Arn
